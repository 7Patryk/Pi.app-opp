#include <iostream>
#include <string>
#include <cctype>
using namespace std;
class Cipher {
public:
    virtual string encrypt(const string &text) const = 0;
    virtual string decrypt(const string &text) const = 0;
};

class CaesarCipher : public Cipher {
private:
    int shift;

public:
    CaesarCipher(int shiftValue) : shift(shiftValue) {}

    string encrypt(const string &text) const override {
        string result = "";
        for (char ch : text) {
            if (isalpha(ch)) {
                char base = islower(ch) ? 'a' : 'A';
                result += static_cast<char>((ch - base + shift) % 26 + base);
            } else {
                result += ch;
            }
        }
        return result;
    }

    string decrypt(const string &text) const override {
        return encrypt(text); // Decryption is done by encryption with 26 - shift
    }
};

class AtbashCipher : public Cipher {
public:
    string encrypt(const string &text) const override {
        string result = "";
        for (char ch : text) {
            if (isalpha(ch)) {
                char base = islower(ch) ? 'a' : 'A';
                result += static_cast<char>(25 - (ch - base) + base);
            } else {
                result += ch;
            }
        }
        return result;
    }

    string decrypt(const string &text) const override {
        return encrypt(text); // Decryption is the same as encryption for Atbash cipher
    }
};

 int rail = 0;
        bool directionDown = true;
        for (char ch : text) {
            fence[rail] += ch;
            if (directionDown) {
                rail++;
                if (rail == rails) {
                    rail -= 2;
                    directionDown = false;
                }
            } else {
                rail--;
                if (rail == -1) {
                    rail += 2;
                    directionDown = true;
                }
            }
        }

        // Combine the fence rows to get the encrypted text
        string result = "";
        for (const string &row : fence) {
            result += row;
        }

        return result;
    }

    string decrypt(const string &text) const override {
        vector<string> fence(rails, "");
        int currentIndex = 0;

        // Calculate the size of each rail
        int railSizes[rails] = {0};
        int rail = 0;
        bool directionDown = true;
        for (char ch : text) {
            railSizes[rail]++;
            if (directionDown) {
                rail++;
                if (rail == rails) {
                    rail -= 2;
                    directionDown = false;
                }
            } else {
                rail--;
                if (rail == -1) {
                    rail += 2;
                    directionDown = true;
                }
            }
        }

        // Build the fence with empty spaces
        for (int i = 0; i < rails; ++i) {
            fence[i] = text.substr(currentIndex, railSizes[i]);
            currentIndex += railSizes[i];
        }

        // Reconstruct the original text
        string result = "";
        rail = 0;
        directionDown = true;
        for (int i = 0; i < text.length(); ++i) {
            result += fence[rail][0];
            fence[rail].erase(0, 1);
            if (directionDown) {
                rail++;
                if (rail == rails) {
                    rail -= 2;
                    directionDown = false;
                }
            } else {
                rail--;
                if (rail == -1) {
                    rail += 2;
                    directionDown = true;
                }
            }
        }

        return result;
    }
    }
};


};

class CipherProcessor {
private:
    Cipher *cipher;

public:
    CipherProcessor(Cipher *cipherInstance) : cipher(cipherInstance) {}

    void process(const string &text, bool isEncrypt) const {
        if (isEncrypt) {
            cout << "Encrypted text: " << cipher->encrypt(text) << endl;
        } else {
            cout << "Decrypted text: " << cipher->decrypt(text) << endl;
        }
    }
};

int main() {
    int choice;
    bool isEncrypt;
    string text, key;

    do {
        cout << "Choose an option:\n";
        cout << "1. Encrypt\n";
        cout << "2. Decrypt\n";
        cout << "0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 0) {
            break;
        }

        cout << "Enter text: ";
        cin.ignore();
        getline(cin, text);

        cout << "Choose a cipher:\n";
        cout << "1. Caesar Cipher\n";
        cout << "2. Atbash Cipher\n";
        cout << "3. Rail Fence Cipher\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int shift;
                cout << "Enter the shift value: ";
                cin >> shift;

                CaesarCipher caesar(shift);
                CipherProcessor processor(&caesar);

                cout << "Encrypting or Decrypting? (1 for Encrypt, 0 for Decrypt): ";
                cin >> isEncrypt;

                processor.process(text, isEncrypt);
                break;
            }
            case 2: {
                AtbashCipher atbash;
                CipherProcessor processor(&atbash);

                cout << "Encrypting or Decrypting? (1 for Encrypt, 0 for Decrypt): ";
                cin >> isEncrypt;

                processor.process(text, isEncrypt);
                break;
            }
            case 3: {
                int rails;
                cout << "Enter the number of rails: ";
                cin >> rails;

                RailFenceCipher railFence;
                CipherProcessor processor(&railFence);

                cout << "Encrypting or Decrypting? (1 for Encrypt, 0 for Decrypt): ";
                cin >> isEncrypt;

                processor.process(text, isEncrypt);
                break;
            }
            case 4: {
                cout << "Enter the key for Vigenere Cipher: ";
                cin >> key;

                VigenereCipher vigenere(key);
                CipherProcessor processor(&vigenere);

                cout << "Encrypting or Decrypting? (1 for Encrypt, 0 for Decrypt): ";
                cin >> isEncrypt;

                processor.process(text, isEncrypt);
                break;
            }
            default:
                cout << "Invalid choice. Please enter a valid option.\n";
        }

    } while (choice != 0);

    cout << "Exiting program.\n";

    return 0;
}
